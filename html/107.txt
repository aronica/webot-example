
              <p/><p>Given a binary tree, return the <i>bottom-up level order</i> traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).</p>&#13;
&#13;
<p>&#13;
For example:<br/>&#13;
Given binary tree <code>{3,9,20,#,#,15,7}</code>,<br/>&#13;
</p><pre>&#13;
    3&#13;
   / \&#13;
  9  20&#13;
    /  \&#13;
   15   7&#13;
</pre>&#13;
&#13;
<p>&#13;
return its bottom-up level order traversal as:<br/>&#13;
</p><pre>&#13;
[&#13;
  [15,7],&#13;
  [9,20],&#13;
  [3]&#13;
]&#13;
</pre>&#13;
&#13;
&#13;
<p class="showspoilers">confused what <code>"{1,#,2,3}"</code> means? <a href="#" onclick="showSpoilers(this); return false;">&gt; read more on how binary tree is serialized on OJ.</a></p>&#13;
&#13;
<div class="spoilers"><br/><b>OJ's Binary Tree Serialization:</b>&#13;
<p>&#13;
The serialization of a binary tree follows a level order traversal, where '#' signifies a path terminator where no node exists below.&#13;
</p>&#13;
<p>&#13;
Here's an example:<br/>&#13;
</p><pre>&#13;
   1&#13;
  / \&#13;
 2   3&#13;
    /&#13;
   4&#13;
    \&#13;
     5&#13;
</pre>&#13;
The above binary tree is serialized as <code>"{1,2,3,#,#,4,#,#,5}"</code>. &#13;
&#13;
</div>
              
                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>
                <span class="hide">
                  
                  <a class="btn btn-xs btn-primary" href="/tag/tree/">Tree</a>
                  
                  <a class="btn btn-xs btn-primary" href="/tag/breadth-first-search/">Breadth-first Search</a>
                  
                </span>
              
            