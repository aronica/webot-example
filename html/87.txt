
              <p/><p>&#13;
Given a string <i>s1</i>, we may represent it as a binary tree by partitioning it to two non-empty substrings recursively.&#13;
</p>&#13;
<p>&#13;
Below is one possible representation of <i>s1</i> = <code>"great"</code>:&#13;
</p>&#13;
<pre>&#13;
    great&#13;
   /    \&#13;
  gr    eat&#13;
 / \    /  \&#13;
g   r  e   at&#13;
           / \&#13;
          a   t&#13;
</pre>&#13;
<p>&#13;
To scramble the string, we may choose any non-leaf node and swap its two children.&#13;
</p>&#13;
<p>&#13;
For example, if we choose the node <code>"gr"</code> and swap its two children, it produces a scrambled string <code>"rgeat"</code>.&#13;
</p>&#13;
<pre>&#13;
    rgeat&#13;
   /    \&#13;
  rg    eat&#13;
 / \    /  \&#13;
r   g  e   at&#13;
           / \&#13;
          a   t&#13;
</pre>&#13;
<p>&#13;
We say that <code>"rgeat"</code> is a scrambled string of <code>"great"</code>.&#13;
</p>&#13;
<p>&#13;
Similarly, if we continue to swap the children of nodes <code>"eat"</code> and <code>"at"</code>, it produces a scrambled string <code>"rgtae"</code>.&#13;
</p>&#13;
<pre>&#13;
    rgtae&#13;
   /    \&#13;
  rg    tae&#13;
 / \    /  \&#13;
r   g  ta  e&#13;
       / \&#13;
      t   a&#13;
</pre>&#13;
<p>&#13;
We say that <code>"rgtae"</code> is a scrambled string of <code>"great"</code>.&#13;
</p>&#13;
<p>&#13;
Given two strings <i>s1</i> and <i>s2</i> of the same length, determine if <i>s2</i> is a scrambled string of <i>s1</i>.&#13;
</p>
              
                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>
                <span class="hide">
                  
                  <a class="btn btn-xs btn-primary" href="/tag/dynamic-programming/">Dynamic Programming</a>
                  
                  <a class="btn btn-xs btn-primary" href="/tag/string/">String</a>
                  
                </span>
              
            