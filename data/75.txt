
              <p/><p>&#13;
Given an array with <i>n</i> objects colored red, white or blue, sort them so that objects of the same color are adjacent, with the colors in the order red, white and blue.&#13;
</p>&#13;
&#13;
<p>&#13;
Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.&#13;
</p>&#13;
&#13;
<p>&#13;
<b>Note:</b><br/>&#13;
You are not suppose to use the library's sort function for this problem.&#13;
</p>&#13;
&#13;
<p class="showspoilers"><a href="#" onclick="showSpoilers(this); return false;">click to show follow up.</a></p>&#13;
&#13;
<div class="spoilers">&#13;
<p><b>Follow up:</b><br/>&#13;
A rather straight forward solution is a two-pass algorithm using counting sort.<br/>&#13;
First, iterate the array counting number of 0's, 1's, and 2's, then overwrite array with total number of 0's, then 1's and followed by 2's.</p>&#13;
<p>Could you come up with an one-pass algorithm using only constant space?<br/>&#13;
</p>&#13;
</div>
              
                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>
                <span class="hide">
                  
                  <a class="btn btn-xs btn-primary" href="/tag/array/">Array</a>
                  
                  <a class="btn btn-xs btn-primary" href="/tag/two-pointers/">Two Pointers</a>
                  
                  <a class="btn btn-xs btn-primary" href="/tag/sort/">Sort</a>
                  
                </span>
              
            