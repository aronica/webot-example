
              <p/><p>Given <i>n</i>, generate all structurally unique <b>BST's</b> (binary search trees) that store values 1...<i>n</i>.</p>&#13;
&#13;
<p>&#13;
For example,<br/>&#13;
Given <i>n</i> = 3, your program should return all 5 unique BST's shown below.&#13;
&#13;
</p><pre>&#13;
   1         3     3      2      1&#13;
    \       /     /      / \      \&#13;
     3     2     1      1   3      2&#13;
    /     /       \                 \&#13;
   2     1         2                 3&#13;
</pre>&#13;
&#13;
&#13;
<p class="showspoilers">confused what <code>"{1,#,2,3}"</code> means? <a href="#" onclick="showSpoilers(this); return false;">&gt; read more on how binary tree is serialized on OJ.</a></p>&#13;
&#13;
<div class="spoilers"><br/><b>OJ's Binary Tree Serialization:</b>&#13;
<p>&#13;
The serialization of a binary tree follows a level order traversal, where '#' signifies a path terminator where no node exists below.&#13;
</p>&#13;
<p>&#13;
Here's an example:<br/>&#13;
</p><pre>&#13;
   1&#13;
  / \&#13;
 2   3&#13;
    /&#13;
   4&#13;
    \&#13;
     5&#13;
</pre>&#13;
The above binary tree is serialized as <code>"{1,2,3,#,#,4,#,#,5}"</code>. &#13;
&#13;
</div>
              
                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>
                <span class="hide">
                  
                  <a class="btn btn-xs btn-primary" href="/tag/tree/">Tree</a>
                  
                  <a class="btn btn-xs btn-primary" href="/tag/dynamic-programming/">Dynamic Programming</a>
                  
                </span>
              
            